<section x-data="FileInfo">
	<div class="space-y-5">
		<div class="">
			<input type="file" x-ref="file" @change="onChange(event)">
		</div>
		<label class="inline-flex items-center cursor-pointer">
			<input x-model="showNESData" type="checkbox" value="" class="sr-only peer" checked>
			<div class="relative w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
			<span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">Show NES-Specific Data</span>
		</label>

		<div class="">
			<button @click="clear()" class="border px-2 py-1">Clear File</button> <br>
		</div>
	</div>
	<div class="mt-12">
		<div class="font-medium mb-1" x-text="showNESData ? 'NES Headered Info' : 'File Info'"></div>
		<div x-show="showNESData" class="">
			<div class="">
				Header: <span class="uppercase" x-text="nesHeader?.join(' ')"></span>
			</div>
			<div>
				Header Type: <span x-text="nesHeaderType"></span>
			</div>
		</div>
		<div>
			Size: <span x-text="size"></span>
		</div>
		<div>
			CRC32: <span x-text="crc32"></span>
		</div>
		<div>
			MD5: <span x-text="md5"></span>
		</div>
		<div>
			SHA-1: <span x-text="sha1"></span>
		</div>
		<div>
			SHA-256: <span x-text="sha256"></span>
		</div>
	</div>
	<div x-show="showNESData" class="">
		<div class="mt-6">
			NES Headerless Info
			<div>
				Size: <span x-text="nesSize"></span>
			</div>
			<div>
				CRC32: <span x-text="nesCrc32"></span>
			</div>
			<div>
				MD5: <span x-text="nesMd5"></span>
			</div>
			<div>
				SHA-1: <span x-text="nesSha1"></span>
			</div>
			<div>
				SHA-256: <span x-text="nesSha256"></span>
			</div>
		</div>
	</div>
</section>

<script>
import Alpine from "alpinejs";
import { md5, crc32, sha1, sha256 } from "hash-wasm";

Alpine.data('FileInfo', () => ({
	showNESData: false,
	file: null,
	size: null,
	crc32: null,
	md5: null,
	sha1: null,
	sha256: null,
	nesHeader: null,
	nesHeaderType: null,
	nesSize: null,
	nesCrc32: null,
	nesMd5: null,
	nesSha1: null,
	nesSha256: null,
	init () {
		this.clear()
	},
	clear() {
		this.$refs.file.value = ''
		this.size = null
		this.crc32 = null
		this.md5 = null
		this.sha1 = null
		this.sha256 = null
		this.nesHeader = null
		this.nesHeaderType = null
		this.nesSize = null
		this.nesCrc32 = null
		this.nesMd5 = null
		this.nesSha1 = null
		this.nesSha256 = null
	},
	onChange(event) {
		this.file = this.$refs.file?.files[0]
		this.size = this.file?.size
		this.nesSize = this.size - 16

		const files = event.target.files;
		const file = files[0];
		const reader = new FileReader();
		reader.onload = function(event) {
			const nesHeaderData = new Uint8Array(event.target.result).slice(0,16)
			const nesHeaderDataPadded = []
			nesHeaderData.forEach(item => {
				let itemValue = item.toString(16)
				nesHeaderDataPadded.push(itemValue.length < 2 ? '0' + itemValue : itemValue)
			})
			if (nesHeaderDataPadded.slice(0, 4).join('').toUpperCase() === '4E45531A' && nesHeaderDataPadded[7] == '08') {
				this.nesHeaderType = 'NES 2.0'
			} else if (nesHeaderDataPadded.slice(0, 4).join('').toUpperCase() === '4E45531A') {
				this.nesHeaderType = 'iNES'
			} else {
				this.nesHeaderType = 'Not iNES or NES 2.0'
			}
			this.nesHeader = nesHeaderDataPadded

			calculateHashes(new Uint8Array(event.target.result)).then((value) => {
				this.crc32 = value.crc32
				this.md5 = value.md5
				this.sha1 = value.sha1
				this.sha256 = value.sha256

				this.nesCrc32 = value.nesCrc32
				this.nesMd5 = value.nesMd5
				this.nesSha1 = value.nesSha1
				this.nesSha256 = value.nesSha256
			})

			async function calculateHashes(data) {
				const nesHeaderlessData = new Uint8Array(data).slice(16)

				return {
					crc32: await crc32(new Uint8Array(data)),
					md5: await md5(new Uint8Array(data)),
					sha1: await sha1(new Uint8Array(data)),
					sha256: await sha256(new Uint8Array(data)),

					nesCrc32: await crc32(nesHeaderlessData),
					nesMd5: await md5(nesHeaderlessData),
					nesSha1: await sha1(nesHeaderlessData),
					nesSha256: await sha256(nesHeaderlessData),
				}
			}
		}.bind(this)
		reader.readAsArrayBuffer(file)
	},
	// getFileSize(file) {
	// 	if (file?.size < 1024) {
	// 		return `${file?.size} bytes`;
	// 	} else if (file?.size >= 1024 && file?.size < 1048576) {
	// 		return `${(file?.size / 1024).toFixed(1)} KB`;
	// 	} else if (file?.size >= 1048576) {
	// 		return `${(file?.size / 1048576).toFixed(1)} MB`;
	// 	}
	// },
}))
</script>
